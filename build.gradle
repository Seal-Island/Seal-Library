buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven { url = 'https://files.minecraftforge.net/maven' }
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
        classpath "io.freefair.gradle:lombok-plugin:5.3.0"
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'io.freefair.lombok'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'com.focamacho'
version = '1.3'
archivesBaseName = 'SealLibrary'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url = 'http://repo.wea-ondara.net/repository/public/' }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'com.github.johnrengelman.shadow'

    group = project.group
    version = project.version

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        mavenCentral()
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        maven { url = 'http://repo.wea-ondara.net/repository/public/' }
        maven { url = 'https://jitpack.io' }
        maven { url = 'https://repo.focamacho.com/repository/releases/' }
    }

    dependencies {
        //LuckPerms
        compileOnly 'net.luckperms:api:5.2'

        //BungeePerms
        compileOnly 'net.alpenblock:BungeePerms:4.0'

        //Vault
        compileOnly('com.github.MilkBowl:VaultAPI:1.7'){
            exclude group: 'org.bukkit'
        }

        //Outros
        compileOnly 'org.jetbrains:annotations:20.1.0'
    }

    tasks.withType(JavaCompile) {
        options.encoding("UTF-8")
    }

    tasks.build.dependsOn(shadowJar)
}

subprojects.each { subproject -> evaluationDependsOn(subproject.path)}

task allJar(type: Jar, dependsOn: subprojects.build) {
    subprojects.each { subproject ->
        from subproject.configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }
    }
}